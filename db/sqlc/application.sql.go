// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: application.sql

package querier

import (
	"context"

	"github.com/google/uuid"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
  id, first_name, last_name
) VALUES (
  $1, $2, $3
)
RETURNING id, first_name, last_name, status
`

type CreateApplicationParams struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication, arg.ID, arg.FirstName, arg.LastName)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Status,
	)
	return i, err
}

const listApplications = `-- name: ListApplications :many
SELECT id, first_name, last_name, status FROM applications
WHERE status = $1
ORDER BY first_name
`

func (q *Queries) ListApplications(ctx context.Context, status string) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, listApplications, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
